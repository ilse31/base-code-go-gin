package main

import (
	"log/slog"
	"os"

	_ "base-code-go-gin-clean/docs" // docs is generated by Swag CLI, you have to import it.
	"base-code-go-gin-clean/internal/config"
	"base-code-go-gin-clean/internal/handler"
	"base-code-go-gin-clean/internal/repository"
	"base-code-go-gin-clean/internal/server"
	"base-code-go-gin-clean/internal/service"
	"base-code-go-gin-clean/pkg/logger"
)

// @title           Base Code Go Gin Clean API
// @version         1.0
// @description     This is a sample server for a clean Go Gin application.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /api/v1

// @securityDefinitions.apikey Bearer
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		slog.Error("Failed to load config", "error", err)
		os.Exit(1)
	}

	// Initialize logger
	log := logger.New(cfg.Server.Environment)

	// Initialize database
	dbWrapper, err := config.NewDB(cfg)
	if err != nil {
		log.Error("Failed to connect to database", "error", err)
		os.Exit(1)
	}
	dbConn := dbWrapper.DB

	// Initialize repositories
	userRepo := repository.NewUserRepository(dbConn)

	// Initialize services
	userSvc := service.NewUserService(userRepo)

	// Initialize email service
	emailSvc := service.NewEmailService(
		cfg.Email.SMTPServer,
		cfg.Email.SMTPPort,
		cfg.Email.SMTPUsername,
		cfg.Email.SMTPPassword,
		cfg.Email.From,
	)

	// Initialize cron service
	cronSvc := service.NewCronService()

	// Initialize daily report service
	dailyReportSvc := service.NewDailyReportService(emailSvc)

	// Schedule daily report at 9 AM every day
	_, err = cronSvc.AddJob("0 9 * * *", dailyReportSvc.GenerateAndSendDailyReport)
	if err != nil {
		log.Error("Failed to schedule daily report", "error", err)
		os.Exit(1)
	}

	// Start cron service
	cronSvc.Start()
	defer cronSvc.Stop()

	log.Info("Cron jobs started")

	// Initialize handlers
	userHandler := handler.NewUserHandler(userSvc)
	emailHandler := handler.NewEmailHandler(emailSvc)
	// rolesHandler := handler.NewRolesHandler()

	// Create server with all required handlers
	srv := server.New(cfg, log,
		server.WithUserHandler(userHandler),
		server.WithEmailHandler(emailHandler),
		// server.WithRolesHandler(rolesHandler),
	)

	// Start server and handle graceful shutdown
	if err := srv.Start(); err != nil {
		log.Error("Server error", "error", err)
		os.Exit(1)
	}
}
