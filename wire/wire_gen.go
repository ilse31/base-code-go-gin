// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"base-code-go-gin-clean/internal/config"
	"base-code-go-gin-clean/internal/handler"
	"base-code-go-gin-clean/internal/repository"
	"base-code-go-gin-clean/internal/server"
	"base-code-go-gin-clean/internal/service"
	"base-code-go-gin-clean/pkg/logger"
	"github.com/uptrace/bun"
)

// Injectors from wire.go:

func InitializeServer() (*server.Server, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	string2 := ProvideEnv(config)
	slogLogger := logger.New(string2)
	db, err := ProvideDB(config)
	if err != nil {
		return nil, err
	}
	bunDB := ProvideBunDB(db)
	userRepository := repository.NewUserRepository(bunDB)
	userService := service.NewUserService(userRepository)
	userHandler := handler.NewUserHandler(userService)
	emailService := service.NewEmailService(config)
	emailHandler := handler.NewEmailHandler(emailService)
	v := ProvideServerOptions(userHandler, emailHandler)
	serverServer := server.New(config, slogLogger, v...)
	return serverServer, nil
}

// wire.go:

func ProvideBunDB(db *config.DB) *bun.DB {
	return db.DB
}

func ProvideEnv(cfg *config.Config) string {
	return cfg.Server.Environment
}

// ProvideServerOptions assembles all server options (handlers)
func ProvideServerOptions(
	userHandler *handler.UserHandler,
	emailHandler *handler.EmailHandler,
) []server.Option {
	return []server.Option{server.WithUserHandler(userHandler), server.WithEmailHandler(emailHandler)}
}
